#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
# require 'fileutils'
# require 'csv'

# PROJEKTI class: list projects and their directories.
class Projekti < Thor
  default_task :default
  class_option :verbose, :type => :boolean, desc: 'print more ouput if verbose true.'
  # alias st => status, def = default, dir => directory

  desc 'default', 'the default command.'
  def default(func = nil)
    # puts 'default'
    puts 'def:dir' if func == 'dir'
    puts 'def:upd' if func == 'upd'
  end

  desc 'dir', 'show the project directory.'
  def dir(proj)
    file = "#{`asetus dir:cfg`.to_s.gsub("\n", '')}/proj.csv"
    File.foreach(file) { |line| puts line if line.include?('krn') }
  end

  desc 'now', 'gives information about the current project directory.'
  def now
    # not doable (probably)
  end

  desc 'status', 'show the git project status message in one line.'
  def status
    # if Dir.exists=('.git')
    status_message = `git status`
    if status_message.to_s.gsub("\n", ' ').include?('On branch master')
      if status_message.to_s.gsub("\n", ' ').include?('ahead')
        puts 'You are ahead of master branch in commits.'
      else
        if status_message.to_s.gsub("\n", ' ').include?('Your branch is up to date with')
          if status_message.to_s.gsub("\n", ' ').include?('Changes not staged for commit:')
            puts 'You have changes not staged for commit.'
          else
            puts 'Up-to-date with origin/master.'
          end
        else
          puts 'You are ahead of master branch in commits.'
        end
      end
    else
      puts 'Not in master branch.'
    end
    puts "\nSTATUS:\n#{status_message}" if options[:verbose]
  end

  desc 'tila', "show the git project status message in one line (same as 'status')."
  def tila
    status
  end

  desc 'update', 'update the git project if no changes or commits locally.'
  def update
    if RUBY_PLATFORM.include?('darwin')
      puts 'Using this update method not possible in MacOS yet.'
    else
      tila = status
      if tila.include?('up-to-date')
        puts 'Up-to-date with origin/master.'
        upd = `git pull`
      else
        puts tila
      end
    end
  end

  private

  def if_git
    #
  end

end

Projekti.start(ARGV)
