#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'sqlite3'
require 'digest'
require 'time'
require 'fileutils'
require 'socket'

# HAKEMISTO class: scans contents of a dir and counts checksums.
class Hakemisto < Thor
  default_task :default

  desc 'default', 'default function.'
  def default(dir = nil)
    polku = path_new
    FileUtils.cd(dir) unless dir.nil?
    db = db_read('hakemisto.db') if File.exist?('hakemisto.db')
    uusi = db_read(polku) # new db
    uusi.execute("CREATE TABLE IF NOT EXISTS Documents (status TEXT, ls_time DATETIME, summa TEXT, path TEXT);")
    insert = 'INSERT INTO Documents (status, ls_time, summa, path) values'
    uusi.execute("#{insert} ('DIR', '#{Time.now}', '0,0', 'hostname:#{polku}')")
    Dir.glob("**/*.*").each do |f|
      if !File.directory?(f)
        count = 0
        checksums = summa(f)
        count = db.execute("SELECT * FROM Documents WHERE summa='#{checksums}';").count if File.exist?('hakemisto.db')
        uusi.execute("#{insert} ('#{status(count, f)}', '#{File.stat(f).mtime}', '#{checksums}', \"#{f}\");")
      end
    end
    uusi&.close
    db&.close if File.exist?('hakemisto.db')
    FileUtils.mv(polku, './hakemisto.db')
    File.delete(polku) if File.exist?(polku)
    puts polku
  end

  desc 'duplicate', 'look for duplicates in the DB.'
  def duplicate(filename = nil)
    db_file = ENV['DB'] || 'hakemisto.db'
    db = db_read(db_file) # non-changing
    if filename.nil?
      db.execute("SELECT * FROM Documents WHERE status='D2';") do |l| puts l.to_s; end
    else
      checksums = summa(filename)
      db.execute("SELECT * FROM Documents WHERE summa='#{checksums}';") do |l| puts l.to_s; end
    end
    db&.close
  end

  desc 'missing', 'look for missing files in the DB.'
  def missing(filename = nil)
    db_file = ENV['DB'] || 'hakemisto.db' # pwd
    db = db_read(db_file) # non-changing, is this line needed?
    if filename.nil?
      db.execute("SELECT * FROM Documents WHERE status='MM';") do |l| puts l.to_s; end
    else
      db.execute("SELECT * FROM Documents WHERE path='#{filename}';") do |l| puts l.to_s; end
    end
    db&.close
  end

  desc 'roina', 'look for roina files in the DB.'
  def roina(filename = nil)
    db_file = ENV['DB'] || 'hakemisto.db'
    db = db_read(db_file) # non-changing, is this line needed?
    if filename.nil?
      db.execute("SELECT * FROM Documents WHERE status='RR';") do |l| puts l.to_s; end
    else
      db.execute("SELECT * FROM Documents WHERE path='#{filename}';") do |l| puts l.to_s; end
    end
    db&.close
  end

  desc 'this_machine', 'checks if given DB was created on this machine (NOTE: work in progress).'
  def this_machine(filename = nil)
    db_file = filename || ENV['DB'] || 'hakemisto.db'
    db = db_read(db_file) # non-changing?
    line = db.execute("SELECT * FROM Documents WHERE status='DIR';")
    db&.close
    true if line.to_s.include?(Socket.gethostname)
    false
  end

  private

  def check_missing(filepath)
    false # add real check
  end

  def db_read(file)
    SQLite3::Database.open file # howto do read-only?
  end

  def path_new
    temp =  ENV['TEMP'] || `asetus dir:temp`.gsub("\n", "") || '~/Projects/temp'
    "#{temp}/#{Process.pid}.db"
  end

  def status(count, filename)
    file = filename # only file's name, no path (not working yet)
    tila = 'NA'
    tila = 'RR' if %w[all-wcprops backup.log changed.lst .DS_Store duplicate.lst entries hakemisto.db hakemisto.lst OK.txt roina.lst Thumbs.db].include?(file)
    tila = 'MM' if check_missing(filename) && tila == 'NA'
    tila = 'D2' if count > 1 && tila == 'NA'
    tila = 'R2' if count > 1 && tila == 'RR'
    tila = 'M2' if count > 1 && tila == 'MM'
    return tila
  end

  def summa(filename)
    "#{Digest::MD5.file filename},#{Digest::SHA256.file filename}".to_s
  end

  def tulosta(row)
    #
  end
end

Hakemisto.start(ARGV)
