#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'sqlite3'
require 'digest'
require 'time'
require 'fileutils'
require 'socket' # might not be available in newer ruby versions.
require 'shellwords'

# HAKEMISTO class: scans contents of a dir and counts checksums.
class Hakemisto < Thor
  default_task :long_default

  desc 'double', 'double scan method.'
  def double(dir = nil); long_default(dir); long_default(dir); end

  desc 'duplikaatit', 'look for duplicates in the DB (based on the checksums).'
  def duplicates(filename = nil)
    db_file = ENV['DB'] || 'hakemisto.db'
    if filename.nil?
      db_list_status(db_file, 'R2')
      db_list_status(db_file, 'D2')
      db_list_status(db_file, 'L2')
      db_list_status(db_file, 'M2')
    else
      checksums = summa(filename)
      db_list_sum(db_file, checksums)
    end
  end

  desc 'long_default', 'long default method.'
  def long_default(dir = nil)
    FileUtils.cd(dir) unless dir.nil?
    polku = path_new
    db_scan(polku) if RUBY_PLATFORM.include?('darwin')
    FileUtils.mv(polku, './hakemisto.db')
    File.delete(polku) if File.exist?(polku)
    puts "#{polku}"
  end

  desc 'lukossa', 'look for locked files in the DB.'
  def lukossa(filename = nil)
    db_file = ENV['DB'] || 'hakemisto.db'
    if filename.nil?
      db_list_status(db_file, 'LL')
      db_list_status(db_file, 'L2')
    else
      db_list_status(db_file, filename)
    end
  end

  desc 'missing', 'look for missing files in the DB.'
  def missing(filename = nil)
    db_file = ENV['DB'] || 'hakemisto.db' # pwd
    if filename.nil?
      db_list_status(db_file, 'MM')
      db_list_status(db_file, 'M2')
    else
      db_list_status(db_file, filename)
    end
  end

  desc 'roina', 'look for trashy files in the DB, incl. ones generated by windows or macos.'
  def roina(filename = nil)
    db_file = ENV['DB'] || 'hakemisto.db'
    if filename.nil?
      db_list_status(db_file, 'R2')
      db_list_status(db_file, 'RR')
    else
      db_list_status(db_file, filename)
    end
  end

  desc 'this_machine', 'checks if given DB was created on this machine (NOTE: work in progress).'
  def this_machine(filename = nil)
    host = ENV['HOSTNAME'] || Socket.gethostname || `hostname`.strip
    db_file = filename || ENV['DB'] || 'hakemisto.db'
    true if db_list_status(db_file, 'DIR').to_s.include?(host)
    false
  end

  map 'dup'    =>    :duplicates
  map 'duplicate' => :duplicates
  map 'this' => :this_machine
  map 'locked' =>    :lukossa
  map 'missing'   => :puuttuu
  map 'trash' => :roina
  map 'tupla'     => :duplikaatit

private

  def db_list_status(db_file, argu)
    db = SQLite3::Database.new db_file
    db.execute("SELECT * FROM Documents WHERE status='#{argu}';") do |l| puts l.to_s; end
  ensure db&.close
  end

  def db_list_sum(db_file, argu)
    db = SQLite3::Database.new db_file
    db.execute("SELECT * FROM Documents WHERE summa='#{argu}';") do |l| puts l.to_s; end
  ensure db&.close
  end

  def db_list_path(db_file, argu)
    db = SQLite3::Database.new db_file
    db.execute("SELECT * FROM Documents WHERE path='#{argu}';") do |l| puts l.to_s; end
  ensure db&.close
  end

  def db_scan(db_file)
    first = ["DIR", "#{Time.now}", "0.0", "hostname:#{db_file}"]
    cols = "status TEXT, ls_time DATETIME, summa TEXT, path TEXT"
    insert = "INSERT INTO Documents (status, ls_time, summa, path) VALUES (?, ?, ?, ?)"
    db = SQLite3::Database.new db_file
    db.execute("CREATE TABLE IF NOT EXISTS Documents (#{cols});")
    db.execute(insert, first)
    Dir.glob("**/*.*").each do |f|
      if !File.directory?(f)
        count = 0
        sums = summa(f)
        count = db_summa(sums) if File.exist?('hakemisto.db')
        values = ["#{status(f, count)}", "#{File.stat(f).mtime}", "#{sums}", "#{f}"]
        db.execute(insert, values)
      end
    end
  # rec from fail?
  ensure db&.close
  end

  # returns the count of rows in DB with same checksum.
  def db_summa(sums)
    from = "SELECT * FROM Documents WHERE summa='#{sums}';"
    SQLite3::Database.open('hakemisto.db').execute(from).count
  end

  def dir_if_ex(); end
    #

  def locked?(filepath)
    if RUBY_PLATFORM.include?('darwin')
      line = `ls -lO #{Shellwords.escape(filepath)}`.to_s # strip extra spaces/tabs
      return true if line.include?(' uchg ')
    end
    false
  end

  # currently not doing anything
  def missing?(filepath); false; end

  def path_new
    temp =  ENV['TEMP'] || `asetus dir:temp`.gsub("\n", "") || '~/Projects/temp'
    "#{temp}/#{Process.pid}.db"
  end

  def status(filename, count)
    tila = 'NA'
    tila = 'LL' if locked?(filename) && tila == 'NA'
    tila = 'RR' if trash?(filename) && tila == 'NA'
    tila = 'MM' if missing?(filename) && tila == 'NA'
    if count > 1
      tila = 'D2' if tila == 'NA'
      tila = 'L2' if tila == 'LL'
      tila = 'R2' if tila == 'RR'
      tila = 'M2' if tila == 'MM'
    end
    tila = 'OK' if File.exists?('OK.txt') && tila == 'NA' # doesn't work with path
    return tila
  end

  def summa(filename)
    "#{Digest::MD5.file filename},#{Digest::SHA256.file filename}".to_s
  end

  def trash?(filepath)
    return true if filepath.include?('all-wcprops')
    return true if filepath.include?('backup.log')
    return true if filepath.include?('changed.lst')
    return true if filepath.include?('.DS_Store')
    return true if filepath.include?('duplicate.lst')
    return true if filepath.include?('entries')
    return true if filepath.include?('hakemisto.db')
    return true if filepath.include?('hakemisto.lst')
    return true if filepath.include?('missing.lst')
    return true if filepath.include?('OK.txt')
    return true if filepath.include?('roina.lst')
    return true if filepath.include?('Thumbs.db')
    return false
  end
end

Hakemisto.start(ARGV)
