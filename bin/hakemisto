#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'sqlite3'
require 'digest'
require 'time'
require 'fileutils'
require 'socket' # might not be available in newer ruby versions.
require 'shellwords'

# HAKEMISTO class: scans contents of a dir and counts checksums.
class Hakemisto < Thor
  default_task :long_default

  desc 'tuplaskannaus', 'double scan method.'
  def tuplaskannaus(dir = nil); long_default(dir); long_default(dir); end

  desc 'duplikaatit', 'look for duplicates in the DB (based on the checksums).'
  def duplikaatit(tiedosto = nil)
    db_tiedosto = ENV['DB'] || 'hakemisto.db'
    if tiedosto.nil?
      db_list_status(db_tiedosto, 'R2')
      db_list_status(db_tiedosto, 'D2')
      db_list_status(db_tiedosto, 'L2')
      db_list_status(db_tiedosto, 'M2')
    else
      tarkistussummat = summa(tiedosto)
      db_list_sum(db_tiedosto, tarkistussummat)
    end
  end

  desc 'long_default', 'the long default method.'
  def long_default(dir = nil)
    FileUtils.cd(dir) unless dir.nil?
    polku = polku_uusi
    db_skannaa_wsl(polku) unless RUBY_PLATFORM.include?('darwin')
    db_skannaa_darwin(polku) if RUBY_PLATFORM.include?('darwin')
    FileUtils.mv(polku, './hakemisto.db')
    File.delete(polku) if File.exist?(polku)
    puts "#{polku}"
  end

  desc 'lukossa', 'look for locked files in the DB.'
  def lukossa(tiedosto = nil)
    db_tiedosto = ENV['DB'] || 'hakemisto.db'
    if tiedosto.nil?
      db_list_status(db_tiedosto, 'LL')
      db_list_status(db_tiedosto, 'L2')
    else
      db_list_status(db_tiedosto, tiedosto)
    end
  end

  desc 'puuttuu', 'look for missing files in the DB.'
  def puuttuu(tiedosto = nil)
    db_tiedosto = ENV['DB'] || 'hakemisto.db'
    if tiedosto.nil?
      db_list_status(db_tiedosto, 'MM')
      db_list_status(db_tiedosto, 'M2')
    else
      db_list_status(db_tiedosto, tiedosto)
    end
  end

  desc 'roina', 'look for trashy files in the DB, incl. the ones generated by windows or macos.'
  def roina(tiedosto = nil)
    db_tiedosto = ENV['DB'] || 'hakemisto.db'
    if tiedosto.nil?
      db_list_status(db_tiedosto, 'R2')
      db_list_status(db_tiedosto, 'RR')
    else
      db_list_status(db_tiedosto, tiedosto)
    end
  end

  desc 'this_machine', 'checks if given DB was created on this machine (NOTE: work in progress).'
  def this_machine(tiedosto = nil)
    host = ENV['HOSTNAME'] || Socket.gethostname || `hostname`.strip
    db_tiedosto = tiedosto || ENV['DB'] || 'hakemisto.db'
    true if db_list_status(db_tiedosto, 'DIR').to_s.include?(host)
    false
  end

  map 'def'        => :long_default
  map 'doublescan' => :tuplaskannaus
  map 'dup'        => :duplikaatit
  map 'duplicate'  => :duplikaatit
  map 'this'       => :this_machine
  map 'locked'     => :lukossa
  map 'missing'    => :puuttuu
  map 'roskat'     => :roina
  map 'scan'       => :long_default
  map 'skannaa'    => :long_default
  map 'trash'      => :roina
  map 'tupla'      => :tuplaskannaus

private

  def db_list_status(db_tiedosto, argu)
    db = SQLite3::Database.new db_tiedosto
    db.execute("SELECT * FROM Documents WHERE status='#{argu}';") do |l| puts l.to_s; end
  ensure db&.close
  end

  def db_list_sum(db_tiedosto, argu)
    db = SQLite3::Database.new db_tiedosto
    db.execute("SELECT * FROM Documents WHERE summa='#{argu}';") do |l| puts l.to_s; end
  ensure db&.close
  end

  def db_list_path(db_tiedosto, argu)
    db = SQLite3::Database.new db_tiedosto
    db.execute("SELECT * FROM Documents WHERE path='#{argu}';") do |l| puts l.to_s; end
  ensure db&.close
  end

  def db_skannaa_darwin(db_tiedosto)
    eka = ["DIR", "#{Time.now}", "0.0", "hostname:#{db_tiedosto}"]
    kolumnit = "status TEXT, ls_time DATETIME, summa TEXT, path TEXT"
    insert = "INSERT INTO Documents (status, ls_time, summa, path) VALUES (?, ?, ?, ?)"
    db = SQLite3::Database.new db_tiedosto
    db.execute("CREATE TABLE IF NOT EXISTS Documents (#{kolumnit});")
    db.execute(insert, eka)
    Dir.glob("**/*.*").each do |f|
      if !File.directory?(f)
        laskuri = 0
        summat = summa(f)
        laskuri = db_summa(summat) if File.exist?('hakemisto.db')
        arvot = ["#{status(f, laskuri)}", "#{File.stat(f).mtime}", "#{summat}", "#{f}"]
        db.execute(insert, arvot)
      end
    end
  # rec from fail?
  ensure db&.close
  end

  def db_skannaa_wsl(db_tiedosto); end
    # db = SQLite3::Database.new db_tiedosto

  # returns the count of rows in DB with same checksum.
  def db_summa(summat)
    rivi = "SELECT * FROM Documents WHERE summa='#{summat}';"
    SQLite3::Database.open('hakemisto.db').execute(rivi).count
  end

  def jos_olemassa(dir)
    return dir if Dir.exists?(dir)
    return nil
  end

  def lukossa?(tiedosto)
    if RUBY_PLATFORM.include?('darwin')
      rivi = `ls -lO #{Shellwords.escape(tiedosto)}`.to_s # strip extra spaces/tabs
      return true if rivi.include?(' uchg ')
    end
    false
  end

  # currently not doing anything
  def puuttuu?(tiedosto); false; end

  def polku_uusi
    temp =  ENV['TEMP'] || `asetus dir:temp`.gsub("\n", "") || jos_olemassa('~/Projects/temp')
    "#{temp}/#{Process.pid}.db"
  end

  def status(tiedosto, laskuri)
    tila = 'NA'
    tila = 'LL' if lukossa?(tiedosto) && tila == 'NA'
    tila = 'RR' if roska?(tiedosto) && tila == 'NA'
    tila = 'MM' if puuttuu?(tiedosto) && tila == 'NA'
    if laskuri > 1
      tila = 'D2' if tila == 'NA'
      tila = 'L2' if tila == 'LL'
      tila = 'R2' if tila == 'RR'
      tila = 'M2' if tila == 'MM'
    end
    tila = 'OK' if File.exists?('OK.txt') && tila == 'NA' # doesn't work with path
    return tila
  end

  def summa(tiedosto)
    "#{Digest::MD5.file tiedosto},#{Digest::SHA256.file tiedosto}".to_s
  end

  def roska?(tiedosto)
    return true if tiedosto.include?('all-wcprops')
    return true if tiedosto.include?('backup.log')
    return true if tiedosto.include?('changed.lst')
    return true if tiedosto.include?('.DS_Store')
    return true if tiedosto.include?('duplicate.lst')
    return true if tiedosto.include?('entries')
    return true if tiedosto.include?('.git/')
    return true if tiedosto.include?('hakemisto.db')
    return true if tiedosto.include?('hakemisto.lst')
    return true if tiedosto.include?('missing.lst')
    return true if tiedosto.include?('OK.txt')
    return true if tiedosto.include?('roina.lst')
    return true if tiedosto.include?('Thumbs.db')
    return false
  end
end

Hakemisto.start(ARGV)
