#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'sqlite3'
require 'fileutils'

# This program/class is for keeping note of various of hotkey combinations in different systems.
class Hotkeys < Thor
  class_option :verbose, type: :boolean, desc: 'use verbose mode.'
  # :verbose, type: :boolean, desc: 'use verbose mode.'
  #:os, type: :string, desc: 'define operating system context.'

  desc 'add [COMMAND]', 'add a new hotkey command to the database.'
  long_desc <<-LONGDESC
    `hotkeys add` will add a new hotkey command to the database.
  LONGDESC
  def add(user_input=nil)
    mod_one = gets
    db_add("Hotkey+combo", "Command function", "App", "MyOS")
  end

  desc 'search [COMMAND]', 'search hotkey commands from database.'
  long_desc <<-LONGDESC
    `hotkeys search` will search hotkey commands from the database.
  LONGDESC
  def search
    db = SQLite3::Database.new(path)
    # db.execute "SELECT * FROM Hotkeys WHERE App=?"
  rescue SQLite3::Exception => e
    puts "Exception ocurred: #{e}"
  ensure
    db&.close if db
  end

  desc 'edit [COMMAND]', 'edit a hotkey command from the database.'
  long_desc <<-LONGDESC
    `hotkeys edit` will start the edit command to change a hotkey command from the database.
  LONGDESC
  def edit
    db = SQLite3::Database.new(path)
    # db.execute "UPDATE Hotkeys SET Function=? WHERE id=?", 1, new_text
  rescue SQLite3::Exception => e
    puts "Exception ocurred: #{e}"
  ensure
    db&.close if db
  end

  private

  def db_add(mod1, mod2, mod3, key, app, function, os=nil)
    db = SQLite3::Database.new(path)
    puts "Exception ocurred: #{e}"
  rescue SQLite3::Exception => e
    # db.execute("INSERT INTO Hotkeys (Hotkey, Command, App, Context) VALUES (?, ?, ?, ?, ?, ?, ?),
  ensure
    db&.close if db
  end

  def path
    db_file_path = "#{`asetus dir:db`.strip}/hotkeys.db"
    create_db(db_file_path) unless File.exist?(db_file_path)
    puts "HOTKEYS: #{db_file_path}" if options[:verbose]
    db_file_path
  end

  def create_db(db_file_path)
    File.touch(db_file_path)
    db = SQLite3::Database.new(db_file_path)
    # db.execute <<-SQL
      #CREATE TABLE Hotkeys(
        #Id INTEGER PRIMARY KEY,
        #Hotkey TEXT,
        #Mod2 VARCHAR(10),
        #App TEXT, Function TEXT, Operating_system VARCHAR(10)
     # );
    #SQL
    db.execute "CREATE TABLE Hotkeys(Id INTEGER PRIMARY KEY, HotKey TEXT, Command TEXT, App TEXT, Context TEXT)"
  rescue SQLite3::Exception => e
    puts "Exception ocurred: #{e}"
  ensure
    db&.close if db
  end
end

Hotkeys.start(ARGV)
