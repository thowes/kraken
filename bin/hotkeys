#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'
require 'thor'
require 'sqlite3'

# This program/class is for keeping note of various of hotkey combinations in different systems.
class Hotkeys < Thor
  class_option :app, desc: 'define application for the hotkey.'
  class_option :os, desc: 'define operating system context.'
  class_option :path, desc: 'define the path for the hotkeys database.'
  class_option :verbose, type: :boolean, desc: 'use verbose mode.'

  desc 'add [COMMAND]', 'add a new hotkey command to the database.'
  long_desc <<-LONGDESC
    `hotkeys add` will add a new hotkey command to the database.
  LONGDESC
  def add(hotkey = nil)
    FileUtils.cd(options[:path]) unless options[:path].nil?
    hotkey = collect_input 'What is the hotkey combo you want to add?' if hotkey.nil?
    app = options[:app]
    app = collect_input "What app is this hotkey (#{hotkey}) for?" if app.nil?
    command = collect_input "What command function is this hotkey (#{hotkey}) in the application (#{app}) for?"
    db_insert(hotkey, command, app)
    puts "This hotkey (#{hotkey}) doing this command (#{command}) in the application (#{app})"
  end

  desc 'search [COMMAND]', 'search hotkey commands from database.'
  long_desc <<-LONGDESC
    `hotkeys search` will search hotkey commands from the database.
  LONGDESC
  def search(hotkey = nil, app = nil)
    db = SQLite3::Database.new(path)
    FileUtils.cd(options[:path]) unless options[:path].nil?
    # db.execute "SELECT * FROM Hotkeys WHERE App=?"
    puts "Exception ocurred: #{e}"
    db&.close if db
  end

  desc 'edit [COMMAND]', 'edit a hotkey command from the database.'
  long_desc <<-LONGDESC
    `hotkeys edit` will start the edit command to change a hotkey command from the database.
  LONGDESC
  def edit
    db = SQLite3::Database.new(path)
    # db.execute "UPDATE Hotkeys SET Function=? WHERE id=?", 1, new_text
  rescue SQLite3::Exception => e
    puts "Exception ocurred: #{e}"
  ensure
    db&.close if db
  end

  private

  def db_insert(hkey, cmd, app)
    SQLite3::Database.new(db_filename) do |db|
      db.execute 'CREATE TABLE IF NOT EXISTS Hotkeys(Id INTEGER PRIMARY KEY, Hkey TEXT, Cmd TEXT, App TEXT, Context TEXT)'
      db.execute "INSERT INTO Hotkeys (Hkey, Cmd, App, Context) VALUES ('#{hkey}', '#{cmd}', '#{app}', '#{RUBY_PLATFORM}')"
    end
    puts "ADD: #{hkey} | #{app} | #{cmd}"
  end

  def db_filename
    'hotkeys.db'
  end

  def db_select(path)
    FileUtils.touch(path) unless File.exist?(path)
    SQLite3::Database.open(hotkeys.db) do |db|
    db.execute 'CREATE TABLE IF NOT EXISTS Hotkeys(Id INTEGER PRIMARY KEY, Hkey TEXT, Cmd TEXT, App TEXT, Context TEXT)'
    puts "Exception ocurred: #{e}"
    end
    db&.close if db
  end

  def collect_input(prompt = nil)
    puts prompt
    $stdin.readline.strip
  end
end

Hotkeys.start(ARGV)
