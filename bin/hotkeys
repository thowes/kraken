#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'sqlite3'
require 'fileutils'

# This program/class is for keeping note of various of hotkey combinations in different systems.
class Hotkeys < Thor
  class_option :verbose, type: :boolean, desc: 'use verbose mode.'
  class_option :app, desc: 'define application for the hotkey.'
  # :verbose, type: :boolean, desc: 'use verbose mode.'
  class_option :os, desc: 'define operating system context.'

  desc 'add [COMMAND]', 'add a new hotkey command to the database.'
  long_desc <<-LONGDESC
    `hotkeys add` will add a new hotkey command to the database.
  LONGDESC
  def add(hotkey = nil)
    if hotkey.nil?
      puts 'What is the hotkey combo? '
      hotkey = $stdin.readline.strip
    end
    if options[:app].nil?
      puts "What app is this hotkey (#{hotkey}) for?"
      app = $stdin.readline.strip
    else
      app = options[:app]
    end
    puts "What command function is this hotkey (#{hotkey}) in the application (#{app}) for?"
    command = $stdin.readline.strip
    # db_add(hotkey, "Command function", "App")
    puts "This hotkey (#{hotkey}) doing this command (#{command}) in the application (#{app})"
  end

  desc 'search [COMMAND]', 'search hotkey commands from database.'
  long_desc <<-LONGDESC
    `hotkeys search` will search hotkey commands from the database.
  LONGDESC
  def search
    db = SQLite3::Database.new(path)
    # db.execute "SELECT * FROM Hotkeys WHERE App=?"
  rescue SQLite3::Exception => e
    puts "Exception ocurred: #{e}"
  ensure
    db&.close if db
  end

  desc 'edit [COMMAND]', 'edit a hotkey command from the database.'
  long_desc <<-LONGDESC
    `hotkeys edit` will start the edit command to change a hotkey command from the database.
  LONGDESC
  def edit
    db = SQLite3::Database.new(path)
    # db.execute "UPDATE Hotkeys SET Function=? WHERE id=?", 1, new_text
  rescue SQLite3::Exception => e
    puts "Exception ocurred: #{e}"
  ensure
    db&.close if db
  end

  private

  def db_add(hotkey, app, command)
    db = SQLite3::Database.open(path)
    puts "ADD: #{hotkey} | #{app} | #{command}"
    # db.execute("INSERT INTO Hotkeys (Hotkey, Command, App, Context) VALUES (?, ?, ?, ?, ?, ?, ?),
  rescue SQLite3::Exception => e
    puts "Exception ocurred: #{e}"
  ensure
    db&.close if db
  end

  def path
    db_file_path = "#{`asetus dir:db`.strip}/hotkeys.db"
    puts "DB: #{db_file_path}" # if options[:verbose]
    create_db(db_file_path) unless File.exist?(db_file_path)
    db_file_path
  end

  def create_db(db_file_path)
    File.touch(db_file_path)
    db = SQLite3::Database.new(db_file_path)
    db.execute 'CREATE TABLE Hotkeys(Id INTEGER PRIMARY KEY, Hotkey TEXT, Command TEXT, App TEXT, Context TEXT)'
  rescue SQLite3::Exception => e
    puts "Exception ocurred: #{e}"
  ensure
    db&.close if db
  end

  # def user_input(prompt = nil)
  # class ends
end

Hotkeys.start(ARGV)
