#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'fileutils'

# manages TYNNYRI file.
class Tynnyri < Thor
  # alias
  default_task :default

  desc 'add', 'add to tynnyri.'
  def add(tynnyri_input)
    file = tynnyri_file
    uusi(file)
    File.open(file, 'w') { |f| f.write(tynnyri_input) }
  end

  desc 'default', 'the default TYNNYRI command.'
  def default(arg2, arg3 = nil)
    if arg2.nil?
      puts 'nil'
    elsif arg2 == 'add' && arg3.not_nil?
      add arg3
    elsif arg2 == 'add' && arg3.nil?
      puts 'add'
    elsif arg2 == 'delete'
      delete
    elsif arg2 == 'kick'
      kick
    elsif ['new', 'reset'].include?(arg2)
      reset
    elsif ['print', 'pr', 'show'].include?(arg2)
      show
    else
      add arg2
    end
  end

  desc 'delete', 'delete TYNNYRI.'
  def delete
    file = tynnyri_file
    FileUtils.rm(file) if File.exist?(file)
  end

  desc 'kick', 'kick TYNNYRI.'
  def kick
    show
    delete
  end

  desc 'uusi', 'uusi TYNNYRI.'
  def uusi(file = nil)
    file = tynnyri_file if file == nil
    FileUtils.touch(file)
  end

  desc 'reset', 'reset TYNNYRI.'
  def reset
    puts 'TYNNYRI: reset'
  end

  desc 'show', 'show TYNNYRI.'
  def show
    File.open(tynnyri_file, 'r') { |f| f.puts }
  end

  private

  def tynnyri_file
    "#{%x|asetus dir:temp|.strip}/#{%x|verkko tty|.to_s.strip}.tynnyri"
  end
end

Tynnyri.start(ARGV)
