#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'sqlite3'
require 'digest'
require 'time'
require 'process'

# HAKEMISTO class: scans contents of a dir and counts checksums.
class Hakemisto < Thor
  default_task :default

  desc 'default', 'default function.'
  def default(dir = nil)
    new_db = db_create
    old_db = db_read(path_old(dir))
    insert = "INSERT INTO Documents (status, ls_time, summa, path) values"
    files.each do |f|
      checksums = "#{Digest::MD5.file f},#{Digest::SHA256.file f}"
      ts = Time.new # read actual f timestamp
      duplicate_count = duplicate_lines(old_db, "#{checksums}").count
      # status = status(duplicate_count, f)
      puts "new_db.exec" "#{insert} ('NA', '#{ts}', '#{checksums}', #{f}')")
    end
    new_db&.close
    old_db&.close
    FileUtils.mv(path_new, path_old(dir))
  end

  desc 'duplicate', 'look for duplicates in the DB.'
  def duplicate(filename = nil)
    db_file = ENV['DB'] || 'hakemisto.db' # pwd
    db = db_read(db_file) # non-changing
    if filename.nil?
      puts "DB=#{db_file} hakemisto-new duplicate #{filename}"
    else
    checksums = "#{Digest::MD5.file filename},#{Digest::SHA256.file filename}"
      duplicate_lines(old, "#{checksums}")
    end
  end

  desc 'missing', 'look for missing files in the DB.'
  def missing(filename = nil)
    if !filename.nil?
      db_file = ENV['DB'] || 'hakemisto.db' # pwd
      db = db_read(db_file) # non-changing, is this line needed?
      # ref_db = db_read() # reference db
    end
  end

  private

  def db_create
    insert = "CREATE TABLE IF NOT EXISTS Documents (status TEXT, ls_time DATETIME, summa TEXT, path TEXT)"
    db_return = SQLite3::Database.open path_new
    db_return(insert)
    db_return
  end

  def db_insert(db, status, ts, checksum, file)
    #
  end

  def db_read(file = nil)
    db_return = SQLite3::Database.read file
    db_return
  end

  def duplicate_lines(old, checksum)
    select_line = "SELECT * FROM Documents WHERE summa"
    old.exec("#{select_line}='#{checksum}'")
  end

  def path_new
    temp =  ENV['TEMP'] || system("asetus dir:temp") || '~/Projects/temp'
    "#{temp}/#{Process.pid}.db"
  end

  def path_old(file = nil)
    file = "#{file}/hakemisto.db" if File.directory?(file) && !file.nil?
    file = 'hakemisto.db' if file.nil?
    return file
  end

  def status(checksums, filename)

    #
  end

end

Hakemisto.start(ARGV)
