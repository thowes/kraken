#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'sqlite3'
require 'digest'

# HAKEMISTO class: scans contents of a dir and counts checksums.
class Hakemisto < Thor
  default_task :default

  desc 'default', 'default function.'
  def default(db_file = nil)
    db = database(db_file) # check filename?
    temp =  ENV['DB'] || system("asetus dir:temp") || '~/Projects/temp'
    insert = "INSERT INTO Documents (path, sum)"
    files.each do |f|
      md5 = Digest::MD5.file f
      summa_256 = Digest::SHA256.file f
      db.exec("#{insert} ('#{f}', '#{md5},#{s256}') ")
    end
    db&.close
    # FileUtils.mv("#{temp}/hakemisto.db", db_file)
  end

  desc 'duplicate', 'look for duplicates in the DB.'
  def duplicate(filename = nil)
    db_file = db_file || ENV['DB'] || 'hakemisto.db'
    db = database(db_file) # non-changing
    if !filename.nil?
      s256 = Digest::SHA256.file filename
      md5 = Digest::MD5.file filename
      # db.exec("SELECT * FROM Documents WHERE sum='#{md5},#{s256}';")
    end
  end

  desc 'missing', 'look for missing files in the DB.'
  def missing
    #
  end

  private

  def database(filename = nil)
    db_file = "#{db_file}/hakemisto.db" if File.directory?(db_file) && !db_file.nil?
    db_file = 'hakemisto.db' if db_file.nil?
    SQLite3::Database.open db_file
  end

end

Hakemisto.start(ARGV)
