#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'sqlite3'
require 'digest'
require 'time'

# HAKEMISTO class: scans contents of a dir and counts checksums.
class Hakemisto < Thor
  default_task :default

  desc 'default', 'default function.'
  def default(dir = nil)
    polku = path_new
    FileUtils.cd(dir) unless dir.nil?
    uusi = db_read(polku) # new db
    db = db_read('hakemisto.db')
    insert = "INSERT INTO Documents (status, ls_time, summa, path) values"
    Dir.glob("*").each do |f|
      checksums = "#{Digest::MD5.file f},#{Digest::SHA256.file f}"
      ts = File.ctime f
      count = db.execute("SELECT * FROM Documents WHERE summa='#{checksums.to_s}';").count
      tila = status(count, f)
      puts "uusi.execute #{insert} ('#{tila}', '#{ts}', '#{checksums}', #{f}');"
    end
    uusi&.close
    db&.close
    puts "FileUtils.mv #{polku}, ./hakemisto.db)"
  end

  desc 'duplicate', 'look for duplicates in the DB.'
  def duplicate(filename = nil)
    db_file = ENV['DB'] || 'hakemisto.db'
    db = db_read(db_file) # non-changing
    if filename.nil?
      db.execute("SELECT * FROM Documents WHERE status='M2';") do |l| puts l.to_s; end
    else
      checksums = "#{Digest::MD5.file filename},#{Digest::SHA256.file filename}"
      db.execute("SELECT * FROM Documents WHERE summa='#{checksums.to_s}';") do |l| puts l.to_s; end
    end
    db&.close
  end

  desc 'missing', 'look for missing files in the DB.'
  def missing(filename = nil)
    if !filename.nil?
      db_file = ENV['DB'] || 'hakemisto.db' # pwd
      db = db_read(db_file) # non-changing, is this line needed?
      # ref_db = db_read() # reference db
      db&.close
    end
  end

  private

  def db_create(*)
    insert = "CREATE TABLE IF NOT EXISTS Documents (status TEXT, ls_time DATETIME, summa TEXT, path TEXT)"
    db_return = SQLite3::Database.open path_new
    db_return(insert)
    return db_return
  end

  def db_insert(db, status, ts, checksum, file)
  #
  end

  def db_read(file)
    SQLite3::Database.open file # howto do read-only?
  end

  def path_new
    temp =  ENV['TEMP'] || `asetus dir:temp`.gsub("\n", "") || '~/Projects/temp'
    "#{temp}/#{Process.pid}.db"
  end

  def path_old(file = nil)
    file = "#{file}/hakemisto.db" if File.directory?(file) && !file.nil?
    file = 'hakemisto.db' if file.nil?
    puts file
    return file.to_s
  end

  def status(count, filename)
    tila = 'NA'
    tila = 'RR' if %w[backup.log .DS_Store hakemisto.db hakemisto.lst roina.lst].include?(filename)
    # tila = 'MM' if missing(filename) && tila == 'NA'
    tila = 'D2' if count > 1 && tila == 'NA'
    tila = 'R2' if count > 1 && tila == 'RR'
    tila = 'M2' if count > 1 && tila == 'MM'
    return tila
  end

end

Hakemisto.start(ARGV)
