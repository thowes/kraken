#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'fileutils'

# soita is finnish for 'play (something that produces sound)'.
class Soita < Thor
  class_option :verbose, type: :boolean, desc: 'use verbose mode.'
  default_task :default

  desc 'add [PATH]', 'add music file in PATH to playlist.'
  long_desc <<-LONGDESC
    `soita add` will add music file(s) in the PATH to playlist.
  LONGDESC
  def add(path = nil)
    File.open(playlist, 'a') do |pl| # rescue/ensure
      if Dir.exist?(path)
        puts "ADD DIR: #{path}" # if options[:verbose]
      elsif File.file?(path) && music?(path)
        puts "ADD: #{path}"
        pl.puts File.expand_path(path).to_s
      elsif options[:verbose]
        puts "DO NOTHING (path not found): #{path}"
      end
    end
  end

  desc 'default [PATH]', 'add or play depending whether PATH included.'
  long_desc <<-LONGDESC
    `soita default` will do add or play depending whether PATH included.
  LONGDESC
  def default(path = nil)
    puts 'SOITA default' if options[:verbose]
    if path.nil?
      play
    elsif %w[list playlist].include?(path)
      list
    else
      add(path)
    end
  end

  desc 'list', 'list the contents of the playlist file.'
  long_desc <<-LONGDESC
    `soita list` lists the contents of the playlist file.
  LONGDESC
  def list
    File.open(playlist, 'r').each do |pl|
      puts pl.to_s
    end
  end

  desc 'play [PATH]', 'play music in PATH.'
  long_desc <<-LONGDESC
    `soita play` will play music in PATH.
  LONGDESC
  def play(path = nil)
    add(path) unless path.nil?
    playlist_file = playlist
    puts "SOITA PLAY: playlist #{playlist_file}"
    # play starting file here
    File.readlines(playlist_file).each do |line|
      # play interval file here
      if music?(line)
        puts "PLAY: #{line}"
        system("afplay \"#{line.strip}\"") if RUBY_PLATFORM.include?('darwin')
      end
    end
    # play end file here
    File.delete(playlist_file) if File.exist?(playlist_file)
  end

  desc 'stop', 'stop playing music.'
  long_desc <<-LONGDESC
    `soita stop` will stop playing music.
  LONGDESC
  def stop(*)
    system('killall ruby "soita default"; killall afplay') if RUBY_PLATFORM.include?('darwin')
    system('killall ruby "soita default"; killall aplay') if RUBY_PLATFORM.include?('linux')
  end

  private

  def music?(path)
    extension = File.extname(path).downcase.strip
    return false if path.downcase.include?('._')
    return true if ['.flac', '.mid', '.midi', '.mp3', '.ogg', '.wav'].include?(extension)
    return true if RUBY_PLATFORM.include?('darwin') && ['.aac', '.ac3', '.adts', '.aif', '.aifc', '.aiff', '.au',
                                                        '.caf', '.m4a', '.mp4', '.sd2', '.snd'].include?(extension)
    return true if RUBY_PLATFORM.include?('mswin') && ['.asf', '.cda', '.wma', '.wm'].include?(extension)

    false
  end

  def playlist
    temp_dir = `asetus dir:temp`.to_s || '~/Projects/temp'
    playlist_file = "#{temp_dir.strip}/playlist.lst"
    if File.file?(playlist_file)
      puts "PLAYLIST OK: #{playlist_file}" if options[:verbose]
    else
      puts "PLAYLIST NOT_OK: #{playlist_file}" if options[:verbose]
      FileUtils.touch(playlist_file)
    end
    playlist_file
  end

    # placeholder
end

Soita.start(ARGV)
