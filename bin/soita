#!/usr/bin/env ruby
require 'thor'
require 'fileutils'

class Soita < Thor
  class_option :verbose, :type => :boolean, :desc => 'use verbose mode.'
  default_task :default

  desc "add PATH", "add music file in PATH to playlist."
  long_desc <<-LONGDESC
    `soita add` will add music file(s) in the PATH to playlist.
  LONGDESC
  def add(path=nil)
    File.open(playlist, 'a') do |pl|
      full_path = File.expand_path(path)
      if File.file?(full_path)
        if Dir.exists?(full_path)
          puts 'ADD DIR: ' + full_path.to_s # if options[:verbose]
        else
          if music?(full_path)
            puts 'ADD: ' + full_path.to_s
            pl.puts full_path
          end
        end
      else
        puts 'DO NOTHING (path not found): ' + path.to_s if options[:verbose]
      end
    end # File.open
  end

  desc "default PATH", "add or play depending whether PATH included."
  long_desc <<-LONGDESC
    `soita default` will do add or play depending whether PATH included.
  LONGDESC
  def default(path=nil)
    puts "SOITA default" if options[:verbose]
    if path.nil?; then
      play
    else
      add(path)
    end
  end

  desc "play PATH", "play music in PATH."
  long_desc <<-LONGDESC
    `soita play` will play music in PATH.
  LONGDESC
  def play(path=nil)
    puts "SOITA play " + path.to_s
    playlist_file = playlist
    File.readlines(playlist_file).each do |line|
      if music?(line)
        puts line if RUBY_PLATFORM.include?('darwin')
      end
    end
    File.delete(playlist_file) if File.exist? playlist_file
  end

private

  def music?(path) # this doesn't cover situations where file endings include ".cue" or macos dotfiles.
    # this doesn't cover situations where file endings include ".cue" or macos dotfiles.
    return true if path.downcase.include?('.flac')
    return true if path.downcase.include?('.midi')
    return true if path.downcase.include?('.mp3')
    return true if path.downcase.include?('.ogg')
    return true if path.downcase.include?('.wav')
    return true if path.downcase.include?('.wma')
    false
  end

  def playlist
    temp_dir = `asetus dir:temp`.to_s || '~/Projects/temp'
    playlist_file = "#{temp_dir.strip}/playlist.lst"
    if File.file?(playlist_file)
      puts "PLAYLIST OK: #{playlist_file}" if options[:verbose]
    else
      puts "PLAYLIST NOT_OK: #{playlist_file}" if options[:verbose]
      FileUtils.touch(playlist_file)
    end
    playlist_file
  end

  def background
    # placeholder
  end
end

Soita.start(ARGV)
