#!/usr/bin/env ruby
require 'thor'
require 'fileutils'

class Soita < Thor
  class_option :verbose, :type => :boolean, :desc => 'use verbose mode.'
  default_task :default

  desc "add PATH", "add music file in PATH to playlist."
  long_desc <<-LONGDESC
    `soita add` will add music file(s) in the PATH to playlist.
  LONGDESC
  def add(path=nil)
    playlist_file = playlist
    if File.file?(playlist_file); then
        full_path = File.expand_path(path)
      if File.file?(full_path); then
      File.open(playlist_file, 'a') do |pl|
          if Dir.exists?(full_path); then
            puts "ADD DIR: " + full_path.to_s #if options[:verbose]
          else
            puts "ADD: " + full_path.to_s if is_music?(full_path)
            pl.puts full_path if is_music?(full_path)
          end
      end #File.open
      else
          puts "DO NOTHING (path not found): " + path.to_s if options[:verbose]
      end
    else
      puts "DO NOTHING (playlist_file not found): " + path.to_s if options[:verbose]
    end
  end

  desc "default PATH", "add or play depending whether PATH included."
  long_desc <<-LONGDESC
    `soita default` will do add or play depending whether PATH included.
  LONGDESC
  def default(path=nil)
    puts "SOITA default" if options[:verbose]
    if path.nil?; then
      play
    else
      add(path)
    end
  end

  desc "play PATH", "play music in PATH."
  long_desc <<-LONGDESC
    `soita play` will play music in PATH.
  LONGDESC
  def play(path=nil)
    puts "SOITA play " + path.to_s
  end

private
  def is_music?(path) #this doesn't cover situations where file endings include ".cue" or macos dotfiles.
    return true if path.downcase.include?(".flac")
    return true if path.downcase.include?(".midi")
    return true if path.downcase.include?(".mp3")
    return true if path.downcase.include?(".ogg")
    return true if path.downcase.include?(".wav")
    return true if path.downcase.include?(".wma")
    return false
  end

  def playlist
    temp_dir = `asetus dir:temp`.to_s || "~/Projects/temp"
    playlist_file = temp_dir.strip + '/playlist.lst'
    unless File.file?(playlist_file) then
      puts "PLAYLIST NOT_OK: " + playlist_file if options[:verbose]
      FileUtils.touch(playlist_file)
    else
      puts "PLAYLIST OK: " + playlist_file if options[:verbose]
    end
    return playlist_file
  end

	def background
   temp_dir = `asetus dir:temp`.to_s || "~/Projects/temp/" #(asetus dir:temp)
   if File.file?(temp_dir) then puts "TEMP_DIR OK"; else puts "TEMP_DIR NOT_OK"; end #check dir not file
   #
	end
end

Soita.start(ARGV)
